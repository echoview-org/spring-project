name: create tag

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.2.3)'
        required: true
        type: string
      force:
        description: 'Force create tag even if exists'
        required: false
        default: false
        type: boolean

jobs:
  validate-and-tag:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # git rev-parse, git branch --show-current, git tag „Ç≥„Éû„É≥„Éâ„ÅßÂ±•Ê≠¥„ÅåÂøÖË¶Å„Å´„Å™„Çã„ÅÆ„Åß
          # fetch-depth : 0 „ÇíÊåáÂÆö„Åô„Çã„ÄÇ
          fetch-depth: 0

      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Validate inputs
        run: |
          VERSION="${{ github.event.inputs.version }}"

          # „Éê„Éº„Ç∏„Éß„É≥ÂΩ¢Âºè„ÉÅ„Çß„ÉÉ„ÇØ
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå ERROR: Version must follow semantic versioning (x.y.z)"
            exit 1
          fi
          echo "‚úÖ Version format valid: $VERSION"

      - name: Check if on main branch
        run: |
          CURRENT_BRANCH=$(git branch --show-current)
          if [[ "$CURRENT_BRANCH" != "main" ]]; then
            echo "‚ùå ERROR: Must be on main branch, currently on: $CURRENT_BRANCH"
            exit 1
          fi
          echo "‚úÖ On main branch"

      - name: Check if tag already exists
        run: |
          VERSION="${{ github.event.inputs.version }}"
          TAG="v$VERSION"
          FORCE="${{ github.event.inputs.force }}"

          if git rev-parse "$TAG" >/dev/null 2>&1; then
            if [[ "$FORCE" != "true" ]]; then
              echo "‚ùå ERROR: Tag $TAG already exists. Use force option to overwrite."
              exit 1
            else
              echo "‚ö†Ô∏è  WARNING: Tag $TAG exists but force option enabled"
            fi
          else
            echo "‚úÖ Tag $TAG does not exist"
          fi

      - name: Validate POM version matches
        run: |
          VERSION="${{ github.event.inputs.version }}"
          POM_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)

          echo "Requested version: $VERSION"
          echo "POM version: $POM_VERSION"

          if [[ "$VERSION" != "$POM_VERSION" ]]; then
          echo "‚ùå ERROR: Requested version ($VERSION) does not match POM version ($POM_VERSION)"
            echo "Please update pom.xml version first"
            exit 1
          fi
          echo "‚úÖ Version consistency verified"

      - name: Run POM validation
        run: |
          echo "üîç Running Maven validation..."
          mvn -B validate
          echo "üîç Running dependency analysis..."
          mvn -B dependency:analyze

      - name: Run BOM validation
        run: |
          echo "üîç Running BOM-specific validation..."

          # BOMÊßãÈÄ†„ÉÅ„Çß„ÉÉ„ÇØ
          PACKAGING=$(mvn help:evaluate -Dexpression=project.packaging -q -DforceStdout)
          if [[ "$PACKAGING" != "pom" ]]; then
            echo "‚ùå ERROR: BOM must have packaging type 'pom', found: $PACKAGING"
            exit 1
          fi
          echo "‚úÖ BOM validation passed"

      - name: Check for version conflicts
        run: |
          echo "üîç Checking for dependency conflicts..."
          CONFLICTS=$(mvn dependency:tree -B 2>/dev/null | grep -E "\[WARNING\].*version conflict" || true)
          if [[ -n "$CONFLICTS" ]]; then
            echo "‚ùå ERROR: Version conflicts detected:"
            echo "$CONFLICTS"
            exit 1
          fi
          echo "‚úÖ No version conflicts found"

      - name: Create and push tag
        run: |
          VERSION="${{ github.event.inputs.version }}"
          TAG="v$VERSION"
          FORCE="${{ github.event.inputs.force }}"

          # GitË®≠ÂÆö
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # „Çø„Ç∞‰ΩúÊàê
          if [[ "$FORCE" == "true" ]]; then
            git tag -a "$TAG" -m "Release version $VERSION" --force
            git push origin "$TAG" --force
            echo "üè∑Ô∏è Force created and pushed tag: $TAG"
          else
            git tag -a "$TAG" -m "Release version $VERSION"
            git push origin "$TAG"
            echo "üè∑Ô∏è Created and pushed tag: $TAG"
          fi

          echo "‚úÖ Tag creation completed successfully"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
